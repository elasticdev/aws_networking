#!/usr/bin/env python

import os
import json
from ed_helper_publisher.resource_manage import to_jsonfile
from ed_helper_publisher.serialization import b64_encode
from ed_helper_publisher.utilities import print_json

#############################################
# change to b64
# centralize
#############################################
tf_state_file = os.environ.get("TF_STATE_FILE","terraform.tfstate")
tf_resource_type = os.environ.get("TF_RESOURCE_TYPE","aws_vpc")
tf_include_raw = os.environ.get("TF_INCLUDE_RAW")

ed_resource_type = os.environ.get("ED_RESOURCE_TYPE","vpc")
ed_provider = os.environ.get("ED_PROVIDER","aws")

try:
    tf_include_query_keys = list(os.environ.get("TF_INCLUDE_QUERY_KEYS").split(","))
except:
    tf_include_query_keys = None
#############################################

with open(tf_state_file) as json_file:
    data = json.load(json_file)

if not data:
    print "ERROR - there is no data from {}".format(os.path.join(os.getcwd(),tf_state_file))
    exit(9)

values = { "tf_resource_type":tf_resource_type,
           "main":True,
           "resouce_type":ed_resource_type,
           "provider":ed_provider }

for k,v in data.get("outputs").items():
    values[k] = v['value']

# include raw with fresh read
if tf_include_raw:

    with open(tf_state_file) as json_file:
        raw = json.load(json_file)

    values["raw"] = {"terraform":b64_encode(raw)}

if os.environ.get("AWS_DEFAULT_REGION"): 
    values["region"] = os.environ["AWS_DEFAULT_REGION"]
    values["aws_default_region"] = os.environ["AWS_DEFAULT_REGION"]

for resource in data["resources"]:

    for instance in resource["instances"]:

        if resource["type"] != tf_resource_type:
            continue

        for _key,_value in resource["instances"][0]["attributes"].items():
            if not tf_include_query_keys or _key in tf_include_query_keys:
                values[_key] = _value

        break

# ref 34532045732
#print_json(values)
to_jsonfile(values,"resource.json")
