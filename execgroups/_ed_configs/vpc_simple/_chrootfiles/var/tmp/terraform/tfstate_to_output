#!/usr/bin/env python

import os
import json
from ed_helper_publisher.resource_manage import to_jsonfile
from ed_helper_publisher.serialization import b64_encode

terraform_state_file = os.environ.get("TERRAFORM_STATE_FILE","terraform.tfstate")
terraform_resource_type = os.environ.get("TF_RESOURCE_TYPE","aws_vpc")

with open(terraform_state_file) as json_file:
    data = json.load(json_file)

with open(terraform_state_file) as json_file:
    raw = json.load(json_file)

if not data:
    print "ERROR - there is no data from {}".format(os.path.join(os.getcwd(),terraform_state_file))
    exit(9)

values = data["outputs"]
values["resource_type"] = "vpc"
values["provider"] = "aws"
values["main"] = True
values["raw"] = {"terraform":b64_encode(raw)}

if os.environ.get("AWS_DEFAULT_REGION"): 
    values["region"] = os.environ["AWS_DEFAULT_REGION"]
    values["aws_default_region"] = os.environ["AWS_DEFAULT_REGION"]

for resource in data["resources"]:
    for instance in resource["instances"]:

        if resource["type"] != terraform_resource_type:
            continue

        for _key,_value in resource["instances"][0]["attributes"].items():
            values[_key] = _value

        break

# ref 34532045732
to_jsonfile(values,"resource.json")
